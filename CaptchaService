package com.binaryoptions.auth.service;

import com.binaryoptions.core.persistence.jpa.entity.captcha.GoogleResponse;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestOperations;

import javax.servlet.http.HttpServletRequest;
import java.net.URI;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

@Service
public class CaptchaService {

    private static final Logger LOGGER = LogManager.getLogger(CaptchaService.class);
    private static final Pattern RESPONSE_PATTERN = Pattern.compile("[A-Za-z0-9_-]+");
    private final int MAX_ATTEMPT = 4;

    @Autowired
    private RestOperations restTemplate;
    @Autowired
    private HttpServletRequest request;
    @Value("${google.recaptcha.key.secret}")
    private String secret;

    private LoadingCache<String, Integer> attemptsCache = CacheBuilder.newBuilder().expireAfterWrite(4, TimeUnit.HOURS).build(new CacheLoader<String, Integer>() {
        @Override
        public Integer load(final String key) {
            return 0;
        }
    });

    public Boolean checkCaptcha(String captcha) throws Exception {
        LOGGER.debug("Attempting to validate response {}", captcha);

        if (isBlocked(getClientIP())) {
            throw new Exception("Client exceeded maximum number of failed attempts");
        }

        if (!responseSanityCheck(captcha)) {
            throw new Exception("Captcha contains invalid characters");
        }

        final URI verifyUri = URI.create(String.format("https://www.google.com/recaptcha/api/siteverify?secret=%s&response=%s&remoteip=%s", getReCaptchaSecret(), captcha, getClientIP()));
        try {
            final GoogleResponse googleResponse = restTemplate.getForObject(verifyUri, GoogleResponse.class);
            LOGGER.debug("Google's response: {} ", googleResponse.toString());

            if (!googleResponse.isSuccess()) {
                if (googleResponse.hasClientError()) {
                    reCaptchaFailed(getClientIP());
                }
                throw new Exception("reCaptcha was not successfully validated");
            }
        } catch (RestClientException rce) {
            throw new Exception("Registration unavailable at this time.  Please try again later.", rce);
        }
        reCaptchaSucceeded(getClientIP());
        return true;

    }

    private String getClientIP() {
        final String xfHeader = request.getHeader("X-Forwarded-For");
        if (xfHeader == null) {
            return request.getRemoteAddr();
        }
        return xfHeader.split(",")[0];
    }

    public void reCaptchaFailed(final String key) {
        int attempts = attemptsCache.getUnchecked(key);
        attempts++;
        attemptsCache.put(key, attempts);
    }

    public void reCaptchaSucceeded(final String key) {
        attemptsCache.invalidate(key);
    }

    private boolean responseSanityCheck(final String response) {
        return StringUtils.hasLength(response) && RESPONSE_PATTERN.matcher(response).matches();
    }

    public String getReCaptchaSecret() {
        return secret;
    }

    public boolean isBlocked(final String key) {
        return attemptsCache.getUnchecked(key) >= MAX_ATTEMPT;
    }
}
