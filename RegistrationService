package com.binaryoptions.auth.service;

import com.binaryoptions.auth.event.OnRegistrationCompleteEvent;
import com.binaryoptions.core.commons.dto.PublicCustomerDto;
import com.binaryoptions.core.persistence.jpa.entity.security.VerificationToken;
import com.binaryoptions.core.persistence.jpa.entity.user.*;
import com.binaryoptions.core.persistence.jpa.repository.company.preferences.AccountStatusRepository;
import com.binaryoptions.core.persistence.jpa.repository.company.preferences.AccountTypeRepository;
import com.binaryoptions.core.persistence.jpa.repository.company.preferences.SaleStatusRepository;
import com.binaryoptions.core.persistence.jpa.repository.company.preferences.TeamRepository;
import com.binaryoptions.core.persistence.jpa.repository.security.VerificationTokenRepository;
import com.binaryoptions.core.persistence.jpa.repository.user.*;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.Clock;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class RegistrationService {

    public static final String TOKEN_INVALID = "invalidToken";
    public static final String TOKEN_EXPIRED = "expired";
    public static final String TOKEN_VALID = "valid";
    private static final Logger LOGGER = LogManager.getLogger(RegistrationService.class);
    @Autowired
    private ApplicationEventPublisher eventPublisher;
    @Autowired
    private VerificationTokenRepository verificationTokenRepository;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private RoleRepository roleRepository;
    @Autowired
    private PasswordEncoder encoder;
    @Autowired
    private ProfileRepository profileRepository;
    @Autowired
    private TeamRepository teamRepository;
    @Autowired
    private AccountRepository accountRepository;
    @Autowired
    private AccountStatusRepository accountStatusRepository;
    @Autowired
    private AccountTypeRepository accountTypeRepository;
    @Autowired
    private PermissionsRepository permissionsRepository;
    @Autowired
    private SaleStatusRepository saleStatusRepository;

    public void createVerificationTokenForUser(final User user, final String token) {
        final VerificationToken myToken = new VerificationToken(token, user);
        verificationTokenRepository.save(myToken);
    }

    public VerificationToken generateNewVerificationToken(final String existingVerificationToken) {
        VerificationToken vToken = verificationTokenRepository.findByToken(existingVerificationToken);
        vToken.updateToken(UUID.randomUUID().toString());
        vToken = verificationTokenRepository.save(vToken);
        return vToken;
    }

    public String validateVerificationToken(String token) {
        VerificationToken verificationToken = verificationTokenRepository.findByToken(token);
        if (verificationToken == null) {
            return TOKEN_INVALID;
        }

        User user = verificationToken.getUser();
        if (DateTime.now().isAfter(verificationToken.getExpiryDate().getTime())) {
            verificationTokenRepository.delete(verificationToken);
            return TOKEN_EXPIRED;
        }

        user.setEnabled(true);
        userRepository.save(user);
        return TOKEN_VALID;
    }


    @Transactional
    public User registerUserAccount(User user, String appUrl) {
        if (isEmailExist(user.getEmail())) {
            LOGGER.log(Level.INFO, "There is an account with that email address: " + user.getEmail());
            throw new IllegalArgumentException("There is an account with that email address: " + user.getEmail());
        }
        user.setPassword(encoder.encode(user.getPassword()));
        user.getRoles().add(roleRepository.findByName(UserType.ROLE_ADMIN));

        User newUser = userRepository.save(user);
        eventPublisher.publishEvent(new OnRegistrationCompleteEvent(newUser, LocaleContextHolder.getLocale(), appUrl));
        return newUser;
    }

    @Transactional
    public User registerCustomerAccount(PublicCustomerDto customer) {
        if (isEmailExist(customer.getEmail())) {
            LOGGER.log(Level.INFO, "There is an account with that email address: " + customer.getEmail());
            throw new IllegalArgumentException("There is an account with that email address: " + customer.getEmail());
        }
        User user = new User();
        user.setPassword(encoder.encode(customer.getPassword()));
        user.setEmail(customer.getEmail());
        user.setName(customer.getEmail());
        user.setCountry(customer.getCountry());
        user.setEnabled(true);
        user.getRoles().add(roleRepository.findByName(UserType.ROLE_CUSTOMER));
        user.setTeam(teamRepository.findDefaultTeam());

        User customerCreated = userRepository.save(user);

        saveProfile(customer.getProfile(), customerCreated);
        saveAccount(customer.getCurrency(), customer.getProfile(), customerCreated.getId());
        return userRepository.findByEmail(customer.getEmail());
    }

    /**
     * Creating default account for customer
     */
    private void saveAccount(Currency currency, Profile profile, Long id) {
        Account defaultCustomerAccount = new Account();
        defaultCustomerAccount.setName(profile.getFirstName() + " " + profile.getLastName());
        defaultCustomerAccount.setActive(true);
        defaultCustomerAccount.setBalance(new Money(BigDecimal.ZERO, currency.id));
        defaultCustomerAccount.setCurrency(currency);
        defaultCustomerAccount.setDefaultAccount(true);
        defaultCustomerAccount.setAccountStatus(accountStatusRepository.findDefaultAccountStatus());
        defaultCustomerAccount.setAccountType(accountTypeRepository.findDefaultAccountType());
        defaultCustomerAccount.setUserId(id);
        accountRepository.add(defaultCustomerAccount);
    }

    private void saveProfile(Profile profile, User customerCreated) {
        profile.setUser(customerCreated);
        profile.setRegistrationDate(LocalDateTime.now(Clock.systemUTC()));
        profile.setSaleStatus(saleStatusRepository.findDefaultSaleStatus());
        profileRepository.save(profile);
    }

    @Transactional
    public User registerAdminUser(AdminUserDTO admin) {
        if (isEmailExist(admin.getEmail())) {
            LOGGER.log(Level.INFO, "There is an account with that email address: " + admin.getEmail());
            throw new IllegalArgumentException("There is an account with that email address: " + admin.getEmail());
        }
        User user = new User();
        user.setPassword(encoder.encode(admin.getPassword()));
        user.setEmail(admin.getEmail());
        user.setName(admin.getName());
        user.setEnabled(admin.getEnabled());
        user.setPhone(admin.getPhone());
        if (admin.getTeam() != null) {
            user.setTeam(teamRepository.findByNameAndDeletedFalse(admin.getTeam()));
        }
        User userCreated = userRepository.save(user);

        saveAdminRoles(admin, userCreated);
        saveAdminPermissions(admin, userCreated);

        return user;
    }

    @Transactional
    public void saveAdminPermissions(AdminUserDTO admin, User user) {
        for (String permission : admin.getAdminPermissions()) {
            user.getPermissions().add(permissionsRepository.findByName(permission));
        }
        userRepository.save(user);
    }

    @Transactional
    public void saveAdminRoles(AdminUserDTO admin, User user) {
        for (UserType userType : admin.getAdminRoles()) {
            user.getRoles().add(roleRepository.findByName(userType));
        }
        userRepository.save(user);
    }

    private boolean isEmailExist(final String email) {
        final User user = userRepository.findByEmail(email);
        return user != null;
    }

    @Transactional
    public User updateAdminUser(AdminUserDTO admin) {
        User currentUser = userRepository.findById(admin.getId());
        if (admin.getName() != null) {
            currentUser.setName(admin.getName());
        }
        if (admin.getPhone() != null) {
            currentUser.setPhone(admin.getPhone());
        }
        if (admin.getTeam() != null) {
            currentUser.setTeam(teamRepository.findByNameAndDeletedFalse(admin.getTeam()));
        }
        if (admin.getEnabled() != null) {
            currentUser.setEnabled(admin.getEnabled());
        }
        if (admin.getAdminPermissions() != null) {
            currentUser.setPermissions(createSetPermissions(admin.getAdminPermissions()));
        }
        if (admin.getAdminRoles() != null) {
            currentUser.setRoles(createSetRoles(admin.getAdminRoles()));
        }
        return userRepository.save(currentUser);
    }

    private Set<Role> createSetRoles(List<UserType> adminRoles) {
        return adminRoles.stream().map(roleRepository::findByName).collect(Collectors.toSet());
    }

    private Set<Permission> createSetPermissions(List<String> adminPermissions) {
        return adminPermissions.stream().map(permissionsRepository::findByName).collect(Collectors.toSet());
    }
}
